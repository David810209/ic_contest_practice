module Maxmin(
    // input signals
	input clk,
	input rst_n,
	input in_valid,
	input [7:0] in_num,

	
    // output signals
    output reg out_valid,
	output reg [7:0]out_max,
	output reg [7:0]out_min
);

//---------------------------------------------------------------------
//   LOGIC DECLARATION
//---------------------------------------------------------------------
reg [3:0] counter;
reg [7:0] num_reg[0:8];
integer i;
wire[7:0] w_out_max,w_out_min;

//---------------------------------------------------------------------
//   Your design                        
//---------------------------------------------------------------------
always@(posedge clk or negedge rst_n)begin
	if(!rst_n)
		counter<=4'b0;
	else if (counter == 'd10)	counter <= 'd0;
	else if (counter !='d0)     counter<=counter + 'd1;
	else if(in_valid)			counter<=counter + 'd1;
end
always @(posedge clk or negedge rst_n) begin
	if(!rst_n)
		for(i=0;i<8;i=i+1)begin
			num_reg[i] <= 'd0;
		end
	else if(in_valid)	num_reg[counter] <= in_num;
end

find_medium f_m(
					.in_0(num_reg[0]),
					.in_1(num_reg[1]), 
					.in_2(num_reg[2]), 
					.in_3(num_reg[3]), 
					.in_4(num_reg[4]),
					.in_5(num_reg[5]),
					.in_6(num_reg[6]),
					.in_7(num_reg[7]),
					.in_8(num_reg[8]),
					.out_max(w_out_max),
					.out_min(w_out_min));


always@(posedge clk or negedge rst_n)
	if(!rst_n)
		out_valid<=1'b0;
	else if(counter==4'd10)
		out_valid<=1'b1; 
	else
		out_valid<=1'b0;
		
always@(posedge clk or negedge rst_n)
	if(!rst_n)
		out_max<=8'b0;
	else if(counter == 'd9)
		out_max<=w_out_max;


always@(posedge clk or negedge rst_n)
	if(!rst_n)
		out_min<=8'd255;
	else if(counter == 'd9)
		out_min<=w_out_min;
		
		
endmodule

module find_medium(in_0,in_1, in_2, in_3, in_4,in_5,in_6,in_7,in_8,out_max,out_min);
input [7:0] in_0;
input [7:0] in_1;
input [7:0] in_2;
input [7:0] in_3;
input [7:0] in_4;
input [7:0] in_5;
input [7:0] in_6;
input [7:0] in_7;
input [7:0] in_8;
output reg [7:0] out_max;
output reg [7:0] out_min;

wire sort[8:0][8:0];
wire [3:0] sort_add[8:0];  //0-9 

//sort0 
assign sort[0][0] = 'd0;
assign sort[0][1] = ( in_0 > in_1 ) ? 'd1 : 'd0;
assign sort[0][2] = ( in_0 > in_2 ) ? 'd1 : 'd0;
assign sort[0][3] = ( in_0 > in_3 ) ? 'd1 : 'd0;
assign sort[0][4] = ( in_0 > in_4 ) ? 'd1 : 'd0;
assign sort[0][5] = ( in_0 > in_5 ) ? 'd1 : 'd0;
assign sort[0][6] = ( in_0 > in_6 ) ? 'd1 : 'd0;
assign sort[0][7] = ( in_0 > in_7 ) ? 'd1 : 'd0;
assign sort[0][8] = ( in_0 > in_8 ) ? 'd1 : 'd0;

//sort1 
assign sort[1][0] = ~sort[0][1];
assign sort[1][1] = 'd0;
assign sort[1][2] = ( in_1 > in_2 ) ? 'd1 : 'd0;
assign sort[1][3] = ( in_1 > in_3 ) ? 'd1 : 'd0;
assign sort[1][4] = ( in_1 > in_4 ) ? 'd1 : 'd0;
assign sort[1][5] = ( in_1 > in_5 ) ? 'd1 : 'd0;
assign sort[1][6] = ( in_1 > in_6 ) ? 'd1 : 'd0;
assign sort[1][7] = ( in_1 > in_7 ) ? 'd1 : 'd0;
assign sort[1][8] = ( in_1 > in_8 ) ? 'd1 : 'd0;

//sort2
assign sort[2][0] = ~sort[0][2];
assign sort[2][1] = ~sort[1][2];
assign sort[2][2] = 'd0;
assign sort[2][3] = ( in_2 > in_3 ) ? 'd1 : 'd0;
assign sort[2][4] = ( in_2 > in_4 ) ? 'd1 : 'd0;
assign sort[2][5] = ( in_2 > in_5 ) ? 'd1 : 'd0;
assign sort[2][6] = ( in_2 > in_6 ) ? 'd1 : 'd0;
assign sort[2][7] = ( in_2 > in_7 ) ? 'd1 : 'd0;
assign sort[2][8] = ( in_2 > in_8 ) ? 'd1 : 'd0;
//sort3 
assign sort[3][0] = ~sort[0][3];
assign sort[3][1] = ~sort[1][3];
assign sort[3][2] = ~sort[2][3];
assign sort[3][3] = 'd0;
assign sort[3][4] = ( in_3 > in_4 ) ? 'd1 : 'd0;
assign sort[3][5] = ( in_3 > in_5 ) ? 'd1 : 'd0;
assign sort[3][6] = ( in_3 > in_6 ) ? 'd1 : 'd0;
assign sort[3][7] = ( in_3 > in_7 ) ? 'd1 : 'd0;
assign sort[3][8] = ( in_3 > in_8 ) ? 'd1 : 'd0;
//sort4
assign sort[4][0] = ~sort[0][4];
assign sort[4][1] = ~sort[1][4];
assign sort[4][2] = ~sort[2][4];
assign sort[4][3] = ~sort[3][4];
assign sort[4][4] = 'd0;
assign sort[4][5] = ( in_4 > in_5 ) ? 'd1 : 'd0;
assign sort[4][6] = ( in_4 > in_6 ) ? 'd1 : 'd0;
assign sort[4][7] = ( in_4 > in_7 ) ? 'd1 : 'd0;
assign sort[4][8] = ( in_4 > in_8 ) ? 'd1 : 'd0;

//sort5
assign sort[5][0] = ~sort[0][5];
assign sort[5][1] = ~sort[1][5];
assign sort[5][2] = ~sort[2][5];
assign sort[5][3] = ~sort[3][5];
assign sort[5][4] = ~sort[4][5];
assign sort[5][5] = 'd0;
assign sort[5][6] = ( in_5 > in_6 ) ? 'd1 : 'd0;
assign sort[5][7] = ( in_5 > in_7 ) ? 'd1 : 'd0;
assign sort[5][8] = ( in_5 > in_8 ) ? 'd1 : 'd0;

//sort 6
assign sort[6][0] = ~sort[0][6];
assign sort[6][1] = ~sort[1][6];
assign sort[6][2] = ~sort[2][6];
assign sort[6][3] = ~sort[3][6];
assign sort[6][4] = ~sort[4][6];
assign sort[6][5] = ~sort[5][6];
assign sort[6][6] = 'd0;
assign sort[6][7] = ( in_6 > in_7 ) ? 'd1 : 'd0;
assign sort[6][8] = ( in_6 > in_8 ) ? 'd1 : 'd0;
//sort 7
assign sort[7][0] = ~sort[0][7];
assign sort[7][1] = ~sort[1][7];
assign sort[7][2] = ~sort[2][7];
assign sort[7][3] = ~sort[3][7];
assign sort[7][4] = ~sort[4][7];
assign sort[7][5] = ~sort[5][7];
assign sort[7][6] = ~sort[6][7];
assign sort[7][7] = 'd0;
assign sort[7][8] = ( in_7 > in_8 ) ? 'd1 : 'd0;

//sort 8
assign sort[8][0] = ~sort[0][8];
assign sort[8][1] = ~sort[1][8];
assign sort[8][2] = ~sort[2][8];
assign sort[8][3] = ~sort[3][8];
assign sort[8][4] = ~sort[4][8];
assign sort[8][5] = ~sort[5][8];
assign sort[8][6] = ~sort[6][8];
assign sort[8][7] = ~sort[7][8];
assign sort[8][8] = 'd0;

assign sort_add[0] = sort[0][1] + sort[0][2] + sort[0][3] +sort[0][4] +sort[0][5] +sort[0][6]  +sort[0][7]   + sort[0][8];
assign sort_add[1] = sort[1][0]  + sort[1][2] + sort[1][3] +sort[1][4] +sort[1][5] +sort[1][6] +sort[1][7]  + sort[1][8];
assign sort_add[2] = sort[2][0] + sort[2][1] + sort[2][3] +sort[2][4] +sort[2][5] +sort[2][6]  +sort[2][7]   + sort[2][8];
assign sort_add[3] = sort[3][0] + sort[3][1] + sort[3][2] +sort[3][4] +sort[3][5] +sort[3][6]  +sort[3][7]   + sort[3][8];
assign sort_add[4] = sort[4][0] + sort[4][1] + sort[4][2] + sort[4][3]  +sort[4][5] +sort[4][6] +sort[4][7] + sort[4][8];
assign sort_add[5] = sort[5][0] + sort[5][1] + sort[5][2] + sort[5][3] +sort[5][4]  +sort[5][6] +sort[5][7] + sort[5][8];
assign sort_add[6] = sort[6][0] + sort[6][1] + sort[6][2] + sort[6][3] +sort[6][4] +sort[6][5]  +sort[6][7] + sort[6][8];
assign sort_add[7] = sort[7][0] + sort[7][1] + sort[7][2] + sort[7][3] +sort[7][4] +sort[7][5] +sort[7][6]  + sort[7][8];
assign sort_add[8] = sort[8][0] + sort[8][1] + sort[8][2] + sort[8][3] +sort[8][4] +sort[8][5] +sort[8][6]  + sort[8][7];

always @(*) begin
   out_max = 'd0;
   if(sort_add[0] == 'd8)  out_max = in_0;
   if(sort_add[1] == 'd8)  out_max = in_1;
   if(sort_add[2] == 'd8)  out_max = in_2;
   if(sort_add[3] == 'd8)  out_max = in_3;
   if(sort_add[4] == 'd8)  out_max = in_4;
   if(sort_add[5] == 'd8)  out_max = in_5;
   if(sort_add[6] == 'd8)  out_max = in_6;
   if(sort_add[7] == 'd8)  out_max = in_7;
   if(sort_add[8] == 'd8)  out_max = in_8;
end
always @(*) begin
   out_min = 'd0;
   if(sort_add[0] == 'd0)  out_min = in_0;
   if(sort_add[1] == 'd0)  out_min = in_1;
   if(sort_add[2] == 'd0)  out_min = in_2;
   if(sort_add[3] == 'd0)  out_min = in_3;
   if(sort_add[4] == 'd0)  out_min = in_4;
   if(sort_add[5] == 'd0)  out_min = in_5;
   if(sort_add[6] == 'd0)  out_min = in_6;
   if(sort_add[7] == 'd0)  out_min = in_7;
   if(sort_add[8] == 'd0)  out_min = in_8;
end
endmodule